
<!-- saved from url=(0038)http://www.verilog.com/VerilogBNF.html -->
<HTML><HEAD><META http-equiv="Content-Type" content="text/html; charset=GBK">
    <TITLE>Verilog Formal Syntax Specification</TITLE>
<LINK rel="shortcut icon" href="http://www.verilog.com/favicon.ico">
<LINK rel="icon" type="image/gif" href="http://www.verilog.com/animated_favicon1.gif">
<STYLE type="text/css">#yddContainer{display:block;font-family:Microsoft YaHei;position:relative;width:100%;height:100%;top:-4px;left:-4px;font-size:12px;border:1px solid}#yddTop{display:block;height:22px}#yddTopBorderlr{display:block;position:static;height:17px;padding:2px 28px;line-height:17px;font-size:12px;color:#5079bb;font-weight:bold;border-style:none solid;border-width:1px}#yddTopBorderlr .ydd-sp{position:absolute;top:2px;height:0;overflow:hidden}.ydd-icon{left:5px;width:17px;padding:0px 0px 0px 0px;padding-top:17px;background-position:-16px -44px}.ydd-close{right:5px;width:16px;padding-top:16px;background-position:left -44px}#yddKeyTitle{float:left;text-decoration:none}#yddMiddle{display:block;margin-bottom:10px}.ydd-tabs{display:block;margin:5px 0;padding:0 5px;height:18px;border-bottom:1px solid}.ydd-tab{display:block;float:left;height:18px;margin:0 5px -1px 0;padding:0 4px;line-height:18px;border:1px solid;border-bottom:none}.ydd-trans-container{display:block;line-height:160%}.ydd-trans-container a{text-decoration:none;}#yddBottom{position:absolute;bottom:0;left:0;width:100%;height:22px;line-height:22px;overflow:hidden;background-position:left -22px}.ydd-padding010{padding:0 10px}#yddWrapper{color:#252525;z-index:10001;background:url(chrome-extension://eopjamdnofihpioajgfdikhhbobonhbb/ab20.png);}#yddContainer{background:#fff;border-color:#4b7598}#yddTopBorderlr{border-color:#f0f8fc}#yddWrapper .ydd-sp{background-image:url(chrome-extension://eopjamdnofihpioajgfdikhhbobonhbb/ydd-sprite.png)}#yddWrapper a,#yddWrapper a:hover,#yddWrapper a:visited{color:#50799b}#yddWrapper .ydd-tabs{color:#959595}.ydd-tabs,.ydd-tab{background:#fff;border-color:#d5e7f3}#yddBottom{color:#363636}#yddWrapper{min-width:250px;max-width:400px;}</STYLE></HEAD><BODY>
------ From: Chris Satterlee, Wed, May 3, 1995 ------ 
<H1>Verilog Formal Syntax Specification</H1>
The basis for this formal syntax specification was obtained from the
home page of <A href="http://www.ece.cmu.edu/~thomas/"> Professor Don
Thomas</A>, who obtained it from the Verilog Language Reference
Manual, Version 2.0, available from Open Verilog International (OVI)
and is used with their permission. <P>
The specification printed here is edited somewhat based on the ongoing
Verilog standardization process which is being carried out by the IEEE
1364 Working Group. Thus, the specification printed here may be
partially inaccurate. The result of this standardization process may
be obtained from the IEEE or from OVI, whose offices are at 15466 Los
Gatos Blvd, Suite 109071, Los Gatos, CA 95032 (408) 353-8899.<BR>
<BR>
This .html file was generated by Chris Satterlee who has allowed us to make
it available to you. This is the same BNF that was distributed with the
first and second edition of the book (pre-IEEE-standardization). Try it
out with your favorite net surfer. For more information, contact:<BR>
<BR>
Chris Satterlee<BR>
RAS System Level Design Engineer<BR>
Silicon Graphics Computer Systems<BR>
Mountain View, CA<BR>
csatt@sgi.com<BR>
<BR>
</P><HR>
<PRE>     <A href="#REF0">1. Source Text</A>
     <A href="#REF37">2. Declarations</A>
     <A href="#REF68">3. Primitive Instances</A>
     <A href="#REF79">4. Module  Instantiations</A>
     <A href="#REF89">5. Behavioral Statements</A>
     <A href="#REF107">6. Specify Section</A>
     <A href="#REF144">7. Expressions</A>
     <A href="#REF164">8. General </A>


<B>Definition of Items in Formal Syntax Specifications:</B>
+-----------------------+------------------------------------------------------------+
|      <B>Item</B>            |               <B>Meaning</B>                                     |
+-----------------------+------------------------------------------------------------+
| White space           | may be used to separate lexical tokens                     |
+-----------------------+------------------------------------------------------------+
| Angle brackets        | surround each description item and are not literal sym-    |
|                       | bols. That is, they do not appear in the source descrip-   |
|                       | tion. Any text outside angle brackets is literal.          |
+-----------------------+------------------------------------------------------------+
| &lt;name&gt; in lower case  | is a syntax construct item                                 |
+-----------------------+------------------------------------------------------------+
| &lt;NAME&gt; in upper case  | is a lexical token item. Its definition is a terminal node |
|                       | in the description hierarchy -- that is, its definition    |
|                       | does not contain any syntax construct items                |
+-----------------------+------------------------------------------------------------+
| &lt;name&gt;?               | is an optional item                                        |
+-----------------------+------------------------------------------------------------+
| &lt;name&gt;*               | is zero, one, or more items                                |
+-----------------------+------------------------------------------------------------+
| &lt;name&gt;+               | is one or more items                                       |
+-----------------------+------------------------------------------------------------+
| &lt;name&gt;&lt;,&lt;name&gt;&gt;*      | is a comma-separated list of items with at least one       |
|                       | item in the list                                           |
+-----------------------+------------------------------------------------------------+
| &lt;name&gt;::=             | gives a syntax definition to an item                       |
+-----------------------+------------------------------------------------------------+
| ||=                   | introduces an alternative syntax definition                |
+-----------------------+------------------------------------------------------------+

</PRE>
<H2><A name="REF0"></A>1. Source Text</H2>
<PRE>
<A name="REF1"></A><B><A href="#REF1">&lt;source_text&gt;</A></B>
	::= &lt;<A href="#REF2">description</A>&gt;*

<A name="REF2"></A><B><A href="#REF2">&lt;description&gt;</A></B>
	::= &lt;<A href="#REF3">module</A>&gt;
	||= &lt;<A href="#REF12">UDP</A>&gt;

<A name="REF3"></A><B><A href="#REF3">&lt;module&gt;</A></B>
	::= module &lt;<A href="#REF81">name_of_module</A>&gt; &lt;<A href="#REF5">list_of_ports</A>&gt;? ;
		&lt;<A href="#REF11">module_item</A>&gt;*
		endmodule
	||= macromodule &lt;<A href="#REF81">name_of_module</A>&gt; &lt;<A href="#REF5">list_of_ports</A>&gt;? ;
		&lt;<A href="#REF11">module_item</A>&gt;*
		endmodule

<A name="REF4"></A><B><A href="#REF4">&lt;name_of_module&gt;</A></B>
	::= &lt;<A href="#REF170">IDENTIFIER</A>&gt;

<A name="REF5"></A><B><A href="#REF5">&lt;list_of_ports&gt;</A></B>
	::= ( &lt;<A href="#REF6">port</A>&gt; &lt;,&lt;<A href="#REF6">port</A>&gt;&gt;* )

<A name="REF6"></A><B><A href="#REF6">&lt;port&gt;</A></B>
	::= &lt;<A href="#REF7">port_expression</A>&gt;?
	||= . &lt;<A href="#REF9">name_of_port</A>&gt; ( &lt;<A href="#REF7">port_expression</A>&gt;? )

<A name="REF7"></A><B><A href="#REF7">&lt;port_expression&gt;</A></B>
	::= &lt;<A href="#REF8">port_reference</A>&gt;
	||= { &lt;<A href="#REF8">port_reference</A>&gt; &lt;,&lt;<A href="#REF8">port_reference</A>&gt;&gt;* }

<A name="REF8"></A><B><A href="#REF8">&lt;port_reference&gt;</A></B>
	::= &lt;<A href="#REF56">name_of_variable</A>&gt;
	||= &lt;<A href="#REF56">name_of_variable</A>&gt; [ &lt;<A href="#REF146">constant_expression</A>&gt; ]
	||= &lt;<A href="#REF56">name_of_variable</A>&gt; [ &lt;<A href="#REF146">constant_expression</A>&gt; :&lt;<A href="#REF146">constant_expression</A>&gt; ]

<A name="REF9"></A><B><A href="#REF9">&lt;name_of_port&gt;</A></B>
	::= &lt;<A href="#REF170">IDENTIFIER</A>&gt;

<A name="REF10"></A><B><A href="#REF10">&lt;name_of_variable&gt;</A></B>
	::= &lt;<A href="#REF170">IDENTIFIER</A>&gt;

<A name="REF11"></A><B><A href="#REF11">&lt;module_item&gt;</A></B>
	::= &lt;<A href="#REF38">parameter_declaration</A>&gt;
	||= &lt;<A href="#REF41">input_declaration</A>&gt;
	||= &lt;<A href="#REF42">output_declaration</A>&gt;
	||= &lt;<A href="#REF43">inout_declaration</A>&gt;
	||= &lt;<A href="#REF44">net_declaration</A>&gt;
	||= &lt;<A href="#REF48">reg_declaration</A>&gt;
	||= &lt;<A href="#REF49">time_declaration</A>&gt;
	||= &lt;<A href="#REF50">integer_declaration</A>&gt;
	||= &lt;<A href="#REF51">real_declaration</A>&gt;
	||= &lt;<A href="#REF52">event_declaration</A>&gt;
	||= &lt;<A href="#REF69">gate_declaration</A>&gt;
	||= &lt;<A href="#REF74">UDP_instantiation</A>&gt;
	||= &lt;<A href="#REF80">module_instantiation</A>&gt;
	||= &lt;<A href="#REF54">parameter_override</A>&gt;
	||= &lt;<A href="#REF53">continuous_assign</A>&gt;
	||= &lt;<A href="#REF108">specify_block</A>&gt;
	||= &lt;<A href="#REF90">initial_statement</A>&gt;
	||= &lt;<A href="#REF91">always_statement</A>&gt;
	||= &lt;<A href="#REF31">task</A>&gt;
	||= &lt;<A href="#REF33">function</A>&gt;

<A name="REF12"></A><B><A href="#REF12">&lt;UDP&gt;</A></B>
	::= primitive &lt;<A href="#REF75">name_of_UDP</A>&gt; ( &lt;<A href="#REF56">name_of_variable</A>&gt;
		&lt;,&lt;<A href="#REF56">name_of_variable</A>&gt;&gt;* ) ;
		&lt;<A href="#REF14">UDP_declaration</A>&gt;+
		&lt;<A href="#REF15">UDP_initial_statement</A>&gt;?
		&lt;<A href="#REF18">table_definition</A>&gt;
		endprimitive

<A name="REF13"></A><B><A href="#REF13">&lt;name_of_UDP&gt;</A></B>
	::= &lt;<A href="#REF170">IDENTIFIER</A>&gt;

<A name="REF14"></A><B><A href="#REF14">&lt;UDP_declaration&gt;</A></B>
	::= &lt;<A href="#REF42">output_declaration</A>&gt;
	||= &lt;<A href="#REF48">reg_declaration</A>&gt;
	||= &lt;<A href="#REF41">input_declaration</A>&gt;

<A name="REF15"></A><B><A href="#REF15">&lt;UDP_initial_statement&gt;</A></B>
	::= initial &lt;<A href="#REF17">output_terminal_name</A>&gt; = &lt;<A href="#REF16">init_val</A>&gt; ;

<A name="REF16"></A><B><A href="#REF16">&lt;init_val&gt;</A></B>
	::= 1'b0
	||= 1'b1
	||= 1'bx
	||= 1'bX
	||= 1'B0
	||= 1'B1
	||= 1'Bx
	||= 1'BX
	||= 1
	||= 0

<A name="REF17"></A><B><A href="#REF17">&lt;output_terminal_name&gt;</A></B>
	::= &lt;<A href="#REF56">name_of_variable</A>&gt;

<A name="REF18"></A><B><A href="#REF18">&lt;table_definition&gt;</A></B>
	::= table &lt;<A href="#REF19">table_entries</A>&gt; endtable

<A name="REF19"></A><B><A href="#REF19">&lt;table_entries&gt;</A></B>
	::= &lt;<A href="#REF20">combinational_entry</A>&gt;+
	||= &lt;<A href="#REF21">sequential_entry</A>&gt;+

<A name="REF20"></A><B><A href="#REF20">&lt;combinational_entry&gt;</A></B>
	::= &lt;<A href="#REF23">level_input_list</A>&gt; : &lt;<A href="#REF28">OUTPUT_SYMBOL</A>&gt; ;

<A name="REF21"></A><B><A href="#REF21">&lt;sequential_entry&gt;</A></B>
	::= &lt;<A href="#REF22">input_list</A>&gt; : &lt;<A href="#REF26">state</A>&gt; : &lt;<A href="#REF27">next_state</A>&gt; ;

<A name="REF22"></A><B><A href="#REF22">&lt;input_list&gt;</A></B>
	::= &lt;<A href="#REF23">level_input_list</A>&gt;
	||= &lt;<A href="#REF24">edge_input_list</A>&gt;

<A name="REF23"></A><B><A href="#REF23">&lt;level_input_list&gt;</A></B>
	::= &lt;<A href="#REF29">LEVEL_SYMBOL</A>&gt;+

<A name="REF24"></A><B><A href="#REF24">&lt;edge_input_list&gt;</A></B>
	::= &lt;<A href="#REF29">LEVEL_SYMBOL</A>&gt;* &lt;<A href="#REF25">edge</A>&gt; &lt;<A href="#REF29">LEVEL_SYMBOL</A>&gt;*

<A name="REF25"></A><B><A href="#REF25">&lt;edge&gt;</A></B>
	::= ( &lt;<A href="#REF29">LEVEL_SYMBOL</A>&gt; &lt;<A href="#REF29">LEVEL_SYMBOL</A>&gt; )
	||= &lt;<A href="#REF30">EDGE_SYMBOL</A>&gt;

<A name="REF26"></A><B><A href="#REF26">&lt;state&gt;</A></B>
	::= &lt;<A href="#REF29">LEVEL_SYMBOL</A>&gt;

<A name="REF27"></A><B><A href="#REF27">&lt;next_state&gt;</A></B>
	::= &lt;<A href="#REF28">OUTPUT_SYMBOL</A>&gt;
	||= - (This is a literal hyphen, see Chapter 5 for details).

<A name="REF28"></A><B><A href="#REF28">&lt;OUTPUT_SYMBOL&gt;</A></B> is one of the following characters:
	0   1   x   X

<A name="REF29"></A><B><A href="#REF29">&lt;LEVEL_SYMBOL&gt;</A></B> is one of the following characters:
	0   1   x   X   ?   b   B

<A name="REF30"></A><B><A href="#REF30">&lt;EDGE_SYMBOL&gt;</A></B> is one of the following characters:
	r   R   f   F   p   P   n   N   *


<A name="REF31"></A><B><A href="#REF31">&lt;task&gt;</A></B>
	::= task &lt;<A href="#REF32">name_of_task</A>&gt; ;
		&lt;<A href="#REF36">tf_declaration</A>&gt;*
		&lt;<A href="#REF92">statement_or_null</A>&gt;
		endtask

<A name="REF32"></A><B><A href="#REF32">&lt;name_of_task&gt;</A></B>
	::= &lt;<A href="#REF170">IDENTIFIER</A>&gt;

<A name="REF33"></A><B><A href="#REF33">&lt;function&gt;</A></B>
	::= function &lt;<A href="#REF34">range_or_type</A>&gt;? &lt;<A href="#REF162">name_of_function</A>&gt; ;
		&lt;<A href="#REF36">tf_declaration</A>&gt;+
		&lt;<A href="#REF93">statement</A>&gt;
		endfunction

<A name="REF34"></A><B><A href="#REF34">&lt;range_or_type&gt;</A></B>
	::= &lt;<A href="#REF66">range</A>&gt;
	||= integer
	||= real

<A name="REF35"></A><B><A href="#REF35">&lt;name_of_function&gt;</A></B>
	::= &lt;<A href="#REF170">IDENTIFIER</A>&gt;

<A name="REF36"></A><B><A href="#REF36">&lt;tf_declaration&gt;</A></B>
	::= &lt;<A href="#REF38">parameter_declaration</A>&gt;
	||= &lt;<A href="#REF41">input_declaration</A>&gt;
	||= &lt;<A href="#REF42">output_declaration</A>&gt;
	||= &lt;<A href="#REF43">inout_declaration</A>&gt;
	||= &lt;<A href="#REF48">reg_declaration</A>&gt;
	||= &lt;<A href="#REF49">time_declaration</A>&gt;
	||= &lt;<A href="#REF50">integer_declaration</A>&gt;
	||= &lt;<A href="#REF51">real_declaration</A>&gt;


</PRE>
<H2><A name="REF37"></A>2. Declarations</H2>
<PRE>
<A name="REF38"></A><B><A href="#REF38">&lt;parameter_declaration&gt;</A></B>
	::= parameter &lt;<A href="#REF111">list_of_param_assignments</A>&gt; ;

<A name="REF39"></A><B><A href="#REF39">&lt;list_of_param_assignments&gt;</A></B>
	::=&lt;<A href="#REF112">param_assignment</A>&gt;&lt;,&lt;<A href="#REF112">param_assignment</A>&gt;*

<A name="REF40"></A><B><A href="#REF40">&lt;param_assignment&gt;</A></B>
	::=&lt;<A href="#REF169">identifier</A>&gt; = &lt;<A href="#REF146">constant_expression</A>&gt;

<A name="REF41"></A><B><A href="#REF41">&lt;input_declaration&gt;</A></B>
	::= input &lt;<A href="#REF66">range</A>&gt;? &lt;<A href="#REF55">list_of_variables</A>&gt; ;

<A name="REF42"></A><B><A href="#REF42">&lt;output_declaration&gt;</A></B>
	::= output &lt;<A href="#REF66">range</A>&gt;? &lt;<A href="#REF55">list_of_variables</A>&gt; ;

<A name="REF43"></A><B><A href="#REF43">&lt;inout_declaration&gt;</A></B>
	::= inout &lt;<A href="#REF66">range</A>&gt;? &lt;<A href="#REF55">list_of_variables</A>&gt; ;

<A name="REF44"></A><B><A href="#REF44">&lt;net_declaration&gt;</A></B>
	::= &lt;<A href="#REF46">NETTYPE</A>&gt; &lt;<A href="#REF47">expandrange</A>&gt;? &lt;<A href="#REF171">delay</A>&gt;? &lt;<A href="#REF55">list_of_variables</A>&gt; ;
	||= trireg &lt;<A href="#REF62">charge_strength</A>&gt;? &lt;<A href="#REF47">expandrange</A>&gt;? &lt;<A href="#REF171">delay</A>&gt;?&lt;<A href="#REF55">list_of_variables</A>&gt; ;
	||= &lt;<A href="#REF46">NETTYPE</A>&gt; &lt;<A href="#REF63">drive_strength</A>&gt;? &lt;<A href="#REF47">expandrange</A>&gt;? &lt;<A href="#REF171">delay</A>&gt;? &lt;<A href="#REF67">list_of_assignments</A>&gt; ;

<A name="REF46"></A><B><A href="#REF46">&lt;NETTYPE&gt;</A></B> is one of the following keywords:
	wire  tri  tri1  supply0  wand  triand  tri0  supply1  wor  trior  trireg

<A name="REF47"></A><B><A href="#REF47">&lt;expandrange&gt;</A></B>
	::= &lt;<A href="#REF66">range</A>&gt;
	||= scalared &lt;<A href="#REF66">range</A>&gt;
	||= vectored &lt;<A href="#REF66">range</A>&gt;

<A name="REF48"></A><B><A href="#REF48">&lt;reg_declaration&gt;</A></B>
	::= reg &lt;<A href="#REF66">range</A>&gt;? &lt;<A href="#REF57">list_of_register_variables</A>&gt; ;

<A name="REF49"></A><B><A href="#REF49">&lt;time_declaration&gt;</A></B>
	::= time &lt;<A href="#REF57">list_of_register_variables</A>&gt; ;

<A name="REF50"></A><B><A href="#REF50">&lt;integer_declaration&gt;</A></B>
	::= integer &lt;<A href="#REF57">list_of_register_variables</A>&gt; ;

<A name="REF51"></A><B><A href="#REF51">&lt;real_declaration&gt;</A></B>
	::= real &lt;<A href="#REF55">list_of_variables</A>&gt; ;

<A name="REF52"></A><B><A href="#REF52">&lt;event_declaration&gt;</A></B>
	::= event &lt;<A href="#REF61">name_of_event</A>&gt; &lt;,&lt;<A href="#REF61">name_of_event</A>&gt;&gt;* ;

<A name="REF53"></A><B><A href="#REF53">&lt;continuous_assign&gt;</A></B>
	::= assign &lt;<A href="#REF63">drive_strength</A>&gt;? &lt;<A href="#REF171">delay</A>&gt;? &lt;<A href="#REF67">list_of_assignments</A>&gt; ;
	||= &lt;<A href="#REF46">NETTYPE</A>&gt; &lt;<A href="#REF63">drive_strength</A>&gt;? &lt;<A href="#REF47">expandrange</A>&gt;? &lt;<A href="#REF171">delay</A>&gt;? &lt;<A href="#REF67">list_of_assignments</A>&gt; ;

<A name="REF54"></A><B><A href="#REF54">&lt;parameter_override&gt;</A></B>
	::= defparam &lt;<A href="#REF111">list_of_param_assignments</A>&gt; ;

<A name="REF55"></A><B><A href="#REF55">&lt;list_of_variables&gt;</A></B>
	::= &lt;<A href="#REF56">name_of_variable</A>&gt; &lt;,&lt;<A href="#REF56">name_of_variable</A>&gt;&gt;*

<A name="REF56"></A><B><A href="#REF56">&lt;name_of_variable&gt;</A></B>
	::= &lt;<A href="#REF170">IDENTIFIER</A>&gt;

<A name="REF57"></A><B><A href="#REF57">&lt;list_of_register_variables&gt;</A></B>
	::= &lt;<A href="#REF58">register_variable</A>&gt; &lt;,&lt;<A href="#REF58">register_variable</A>&gt;&gt;*

<A name="REF58"></A><B><A href="#REF58">&lt;register_variable&gt;</A></B>
	::= &lt;<A href="#REF59">name_of_register</A>&gt;
	||= &lt;<A href="#REF60">name_of_memory</A>&gt; [ &lt;<A href="#REF146">constant_expression</A>&gt; : &lt;<A href="#REF146">constant_expression</A>&gt; ]

<A name="REF59"></A><B><A href="#REF59">&lt;name_of_register&gt;</A></B>
	::= &lt;<A href="#REF170">IDENTIFIER</A>&gt;

<A name="REF60"></A><B><A href="#REF60">&lt;name_of_memory&gt;</A></B>
	::= &lt;<A href="#REF170">IDENTIFIER</A>&gt;

<A name="REF61"></A><B><A href="#REF61">&lt;name_of_event&gt;</A></B>
	::= &lt;<A href="#REF170">IDENTIFIER</A>&gt;

<A name="REF62"></A><B><A href="#REF62">&lt;charge_strength&gt;</A></B>
	::= ( small )
	||= ( medium )
	||= ( large )

<A name="REF63"></A><B><A href="#REF63">&lt;drive_strength&gt;</A></B>
	::= ( &lt;<A href="#REF64">STRENGTH0</A>&gt; , &lt;<A href="#REF65">STRENGTH1</A>&gt; )
	||= ( &lt;<A href="#REF65">STRENGTH1</A>&gt; , &lt;<A href="#REF64">STRENGTH0</A>&gt; )

<A name="REF64"></A><B><A href="#REF64">&lt;STRENGTH0&gt;</A></B> is one of the following keywords:
	supply0  strong0  pull0  weak0  highz0

<A name="REF65"></A><B><A href="#REF65">&lt;STRENGTH1&gt;</A></B> is one of the following keywords:
	supply1  strong1  pull1  weak1  highz1

<A name="REF66"></A><B><A href="#REF66">&lt;range&gt;</A></B>
	::= [ &lt;<A href="#REF146">constant_expression</A>&gt; : &lt;<A href="#REF146">constant_expression</A>&gt; ]

<A name="REF67"></A><B><A href="#REF67">&lt;list_of_assignments&gt;</A></B>
	::= &lt;<A href="#REF94">assignment</A>&gt; &lt;,&lt;<A href="#REF94">assignment</A>&gt;&gt;*


</PRE>
<H2><A name="REF68"></A>3. Primitive Instances</H2>
<PRE>
<A name="REF69"></A><B><A href="#REF69">&lt;gate_declaration&gt;</A></B>
	::= &lt;<A href="#REF70">GATETYPE</A>&gt; &lt;<A href="#REF63">drive_strength</A>&gt;? &lt;<A href="#REF171">delay</A>&gt;?  &lt;<A href="#REF72">gate_instance</A>&gt; &lt;,&lt;<A href="#REF72">gate_instance</A>&gt;&gt;* ;

<A name="REF70"></A><B><A href="#REF70">&lt;GATETYPE&gt;</A></B> is one of the following keywords:
	and  nand  or  nor xor  xnor buf  bufif0 bufif1  not  notif0 notif1  pulldown pullup
	nmos  rnmos pmos rpmos cmos rcmos   tran rtran  tranif0  rtranif0  tranif1 rtranif1

<A name="REF71"></A><B><A href="#REF71">&lt;delay&gt;</A></B>
	::= # &lt;<A href="#REF154">number</A>&gt;
	||= # &lt;<A href="#REF169">identifier</A>&gt;
	||= # (&lt;<A href="#REF147">mintypmax_expression</A>&gt; &lt;,&lt;<A href="#REF147">mintypmax_expression</A>&gt;&gt;? &lt;,&lt;<A href="#REF147">mintypmax_expression</A>&gt;&gt;?)

<A name="REF72"></A><B><A href="#REF72">&lt;gate_instance&gt;</A></B>
	::= &lt;<A href="#REF73">name_of_gate_instance</A>&gt;? ( &lt;<A href="#REF78">terminal</A>&gt; &lt;,&lt;<A href="#REF78">terminal</A>&gt;&gt;* )

<A name="REF73"></A><B><A href="#REF73">&lt;name_of_gate_instance&gt;</A></B>
	::= &lt;<A href="#REF170">IDENTIFIER</A>&gt;&lt;<A href="#REF66">range</A>&gt;?

<A name="REF74"></A><B><A href="#REF74">&lt;UDP_instantiation&gt;</A></B>
	::= &lt;<A href="#REF75">name_of_UDP</A>&gt; &lt;<A href="#REF63">drive_strength</A>&gt;? &lt;<A href="#REF171">delay</A>&gt;?
	&lt;<A href="#REF76">UDP_instance</A>&gt; &lt;,&lt;<A href="#REF76">UDP_instance</A>&gt;&gt;* ;

<A name="REF75"></A><B><A href="#REF75">&lt;name_of_UDP&gt;</A></B>
	::= &lt;<A href="#REF170">IDENTIFIER</A>&gt;

<A name="REF76"></A><B><A href="#REF76">&lt;UDP_instance&gt;</A></B>
	::= &lt;<A href="#REF77">name_of_UDP_instance</A>&gt;? ( &lt;<A href="#REF78">terminal</A>&gt; &lt;,&lt;<A href="#REF78">terminal</A>&gt;&gt;* )

<A name="REF77"></A><B><A href="#REF77">&lt;name_of_UDP_instance&gt;</A></B>
	::= &lt;<A href="#REF170">IDENTIFIER</A>&gt;&lt;<A href="#REF66">range</A>&gt;?

<A name="REF78"></A><B><A href="#REF78">&lt;terminal&gt;</A></B>
	::= &lt;<A href="#REF148">expression</A>&gt;
	||= &lt;<A href="#REF170">IDENTIFIER</A>&gt;


</PRE>
<H2><A name="REF79"></A>4. Module Instantiations</H2>
<PRE>
<A name="REF80"></A><B><A href="#REF80">&lt;module_instantiation&gt;</A></B>
	::= &lt;<A href="#REF81">name_of_module</A>&gt; &lt;<A href="#REF82">parameter_value_assignment</A>&gt;?
		&lt;<A href="#REF83">module_instance</A>&gt; &lt;,&lt;<A href="#REF83">module_instance</A>&gt;&gt;* ;

<A name="REF81"></A><B><A href="#REF81">&lt;name_of_module&gt;</A></B>
	::= &lt;<A href="#REF170">IDENTIFIER</A>&gt;

<A name="REF82"></A><B><A href="#REF82">&lt;parameter_value_assignment&gt;</A></B>
	::= # ( &lt;<A href="#REF148">expression</A>&gt; &lt;,&lt;<A href="#REF148">expression</A>&gt;&gt;* )

<A name="REF83"></A><B><A href="#REF83">&lt;module_instance&gt;</A></B>
	::= &lt;<A href="#REF84">name_of_instance</A>&gt; ( &lt;<A href="#REF85">list_of_module_connections</A>&gt;? )

<A name="REF84"></A><B><A href="#REF84">&lt;name_of_instance&gt;</A></B>
	::= &lt;<A href="#REF170">IDENTIFIER</A>&gt;&lt;<A href="#REF66">range</A>&gt;?

<A name="REF85"></A><B><A href="#REF85">&lt;list_of_module_connections&gt;</A></B>
	::= &lt;<A href="#REF86">module_port_connection</A>&gt; &lt;,&lt;<A href="#REF86">module_port_connection</A>&gt;&gt;*
	||= &lt;<A href="#REF88">named_port_connection</A>&gt; &lt;,&lt;<A href="#REF88">named_port_connection</A>&gt;&gt;*

<A name="REF86"></A><B><A href="#REF86">&lt;module_port_connection&gt;</A></B>
	::= &lt;<A href="#REF148">expression</A>&gt;
	||= &lt;<A href="#REF87">NULL</A>&gt;

<A name="REF87"></A><B><A href="#REF87">&lt;NULL&gt;</A></B>
	::= nothing - this form covers the case of an empty item in a list - for example:
	      (a, b, , d)

<A name="REF88"></A><B><A href="#REF88">&lt;named_port_connection&gt;</A></B>
	::= .&lt;IDENTIFIER&gt; ( &lt;<A href="#REF148">expression</A>&gt;? )


</PRE>
<H2><A name="REF89"></A>5. Behavioral Statements</H2>
<PRE>
<A name="REF90"></A><B><A href="#REF90">&lt;initial_statement&gt;</A></B>
	::= initial &lt;<A href="#REF93">statement</A>&gt;

<A name="REF91"></A><B><A href="#REF91">&lt;always_statement&gt;</A></B>
	::= always &lt;<A href="#REF93">statement</A>&gt;

<A name="REF92"></A><B><A href="#REF92">&lt;statement_or_null&gt;</A></B>
	::= &lt;<A href="#REF93">statement</A>&gt;
	||= ;

<A name="REF93"></A><B><A href="#REF93">&lt;statement&gt;</A></B>
	::=&lt;<A href="#REF95">blocking_assignment</A>&gt; ;
	||= &lt;<A href="#REF96">non_blocking_assignment</A>&gt; ;
	||= if ( &lt;<A href="#REF148">expression</A>&gt; ) &lt;<A href="#REF92">statement_or_null</A>&gt;
	||= if ( &lt;<A href="#REF148">expression</A>&gt; ) &lt;<A href="#REF92">statement_or_null</A>&gt; else &lt;<A href="#REF92">statement_or_null</A>&gt;
	||= case ( &lt;<A href="#REF148">expression</A>&gt; ) &lt;<A href="#REF98">case_item</A>&gt;+ endcase
	||= casez ( &lt;<A href="#REF148">expression</A>&gt; ) &lt;<A href="#REF98">case_item</A>&gt;+ endcase
	||= casex ( &lt;<A href="#REF148">expression</A>&gt; ) &lt;<A href="#REF98">case_item</A>&gt;+ endcase
	||= forever &lt;<A href="#REF93">statement</A>&gt;
	||= repeat ( &lt;<A href="#REF148">expression</A>&gt; ) &lt;<A href="#REF93">statement</A>&gt;
	||= while ( &lt;<A href="#REF148">expression</A>&gt; ) &lt;<A href="#REF93">statement</A>&gt;
	||= for ( &lt;<A href="#REF94">assignment</A>&gt; ; &lt;<A href="#REF148">expression</A>&gt; ; &lt;<A href="#REF94">assignment</A>&gt; ) &lt;<A href="#REF93">statement</A>&gt;
	||= &lt;<A href="#REF97">delay_or_event_control</A>&gt; &lt;<A href="#REF92">statement_or_null</A>&gt;
	||= wait ( &lt;<A href="#REF148">expression</A>&gt; ) &lt;<A href="#REF92">statement_or_null</A>&gt;
	||= -&gt; &lt;<A href="#REF61">name_of_event</A>&gt; ;
	||= &lt;<A href="#REF99">seq_block</A>&gt;
	||= &lt;<A href="#REF100">par_block</A>&gt;
	||= &lt;<A href="#REF103">task_enable</A>&gt;
	||= &lt;<A href="#REF104">system_task_enable</A>&gt;
	||= disable &lt;<A href="#REF32">name_of_task</A>&gt; ;
	||= disable &lt;<A href="#REF101">name_of_block</A>&gt; ;
	||= assign &lt;<A href="#REF94">assignment</A>&gt; ;
	||= deassign &lt;<A href="#REF145">lvalue</A>&gt; ;
	||= force &lt;<A href="#REF94">assignment</A>&gt; ;
	||= release &lt;<A href="#REF145">lvalue</A>&gt; ;

<A name="REF94"></A><B><A href="#REF94">&lt;assignment&gt;</A></B>
	::= &lt;<A href="#REF145">lvalue</A>&gt; = &lt;<A href="#REF148">expression</A>&gt;

<A name="REF95"></A><B><A href="#REF95">&lt;blocking_assignment&gt;</A></B>
	::= &lt;<A href="#REF145">lvalue</A>&gt; = &lt;<A href="#REF148">expression</A>&gt;
	||= &lt;<A href="#REF145">lvalue</A>&gt; = &lt;<A href="#REF97">delay_or_event_control</A>&gt; &lt;<A href="#REF148">expression</A>&gt;

<A name="REF96"></A><B><A href="#REF96">&lt;non_blocking_assignment&gt;</A></B>
	::= &lt;<A href="#REF145">lvalue</A>&gt; &lt;= &lt;<A href="#REF148">expression</A>&gt;
	||= &lt;<A href="#REF145">lvalue</A>&gt; &lt;= &lt;<A href="#REF97">delay_or_event_control</A>&gt; &lt;<A href="#REF148">expression</A>&gt;

<A name="REF97"></A><B><A href="#REF97">&lt;delay_or_event_control&gt;</A></B>
	::= &lt;<A href="#REF172">delay_control</A>&gt;
	||= &lt;<A href="#REF173">event_control</A>&gt;
	||= repeat ( &lt;<A href="#REF148">expression</A>&gt; ) &lt;<A href="#REF173">event_control</A>&gt;

<A name="REF98"></A><B><A href="#REF98">&lt;case_item&gt;</A></B>
	::= &lt;<A href="#REF148">expression</A>&gt; &lt;,&lt;<A href="#REF148">expression</A>&gt;&gt;* : &lt;<A href="#REF92">statement_or_null</A>&gt;
	||= default : &lt;<A href="#REF92">statement_or_null</A>&gt;
	||= default &lt;<A href="#REF92">statement_or_null</A>&gt;

<A name="REF99"></A><B><A href="#REF99">&lt;seq_block&gt;</A></B>
	::= begin &lt;<A href="#REF93">statement</A>&gt;* end
	||= begin : &lt;<A href="#REF101">name_of_block</A>&gt; &lt;<A href="#REF102">block_declaration</A>&gt;* &lt;<A href="#REF93">statement</A>&gt;* end

<A name="REF100"></A><B><A href="#REF100">&lt;par_block&gt;</A></B>
	::= fork &lt;<A href="#REF93">statement</A>&gt;* join
	||= fork : &lt;<A href="#REF101">name_of_block</A>&gt; &lt;<A href="#REF102">block_declaration</A>&gt;* &lt;<A href="#REF93">statement</A>&gt;* join

<A name="REF101"></A><B><A href="#REF101">&lt;name_of_block&gt;</A></B>
	::= &lt;<A href="#REF170">IDENTIFIER</A>&gt;

<A name="REF102"></A><B><A href="#REF102">&lt;block_declaration&gt;</A></B>
	::= &lt;<A href="#REF38">parameter_declaration</A>&gt;
	||= &lt;<A href="#REF48">reg_declaration</A>&gt;
	||= &lt;<A href="#REF50">integer_declaration</A>&gt;
	||= &lt;<A href="#REF51">real_declaration</A>&gt;
	||= &lt;<A href="#REF49">time_declaration</A>&gt;
	||= &lt;<A href="#REF52">event_declaration</A>&gt;

<A name="REF103"></A><B><A href="#REF103">&lt;task_enable&gt;</A></B>
	::= &lt;<A href="#REF32">name_of_task</A>&gt; ;
	||= &lt;<A href="#REF32">name_of_task</A>&gt; ( &lt;<A href="#REF148">expression</A>&gt; &lt;,&lt;<A href="#REF148">expression</A>&gt;&gt;* ) ;

<A name="REF104"></A><B><A href="#REF104">&lt;system_task_enable&gt;</A></B>
	::= &lt;<A href="#REF105">name_of_system_task</A>&gt; ;
	||= &lt;<A href="#REF105">name_of_system_task</A>&gt; ( &lt;<A href="#REF148">expression</A>&gt; &lt;,&lt;<A href="#REF148">expression</A>&gt;&gt;* ) ;

<A name="REF105"></A><B><A href="#REF105">&lt;name_of_system_task&gt;</A></B>
	::= $&lt;<A href="#REF">system_identifier</A>&gt; (Note: the $ may not be followed by a space.)

<A name="REF106"></A><B><A href="#REF106">&lt;SYSTEM_IDENTIFIER&gt;</A></B>
	An &lt;<A href="#REF170">IDENTIFIER</A>&gt; assigned to an existing system task or function


</PRE>
<H2><A name="REF107"></A>6. Specify Section</H2>
<PRE>
<A name="REF108"></A><B><A href="#REF108">&lt;specify_block&gt;</A></B>
	::= specify &lt;<A href="#REF109">specify_item</A>&gt;* endspecify

<A name="REF109"></A><B><A href="#REF109">&lt;specify_item&gt;</A></B>
	::= &lt;<A href="#REF110">specparam_declaration</A>&gt;
	||= &lt;<A href="#REF113">path_declaration</A>&gt;
	||= &lt;<A href="#REF136">level_sensitive_path_declaration</A>&gt;
	||= &lt;<A href="#REF139">edge_sensitive_path_declaration</A>&gt;
	||= &lt;<A href="#REF123">system_timing_check</A>&gt;
	||= &lt;<A href="#REF142">sdpd</A>&gt;

<A name="REF110"></A><B><A href="#REF110">&lt;specparam_declaration&gt;</A></B>
	::= specparam &lt;<A href="#REF111">list_of_param_assignments</A>&gt; ;

<A name="REF111"></A><B><A href="#REF111">&lt;list_of_param_assignments&gt;</A></B>
	::=&lt;<A href="#REF112">param_assignment</A>&gt;&lt;,&lt;<A href="#REF112">param_assignment</A>&gt;&gt;*

<A name="REF112"></A><B><A href="#REF112">&lt;param_assignment&gt;</A></B>
	::=&lt;<A href="#REF">&lt;identifier</A>&gt;=&lt;<A href="#REF146">constant_expression</A>&gt;&gt;

<A name="REF113"></A><B><A href="#REF113">&lt;path_declaration&gt;</A></B>
	::= &lt;<A href="#REF114">path_description</A>&gt; = &lt;<A href="#REF121">path_delay_value</A>&gt; ;

<A name="REF114"></A><B><A href="#REF114">&lt;path_description&gt;</A></B>
	::= ( &lt;<A href="#REF117">specify_input_terminal_descriptor</A>&gt; =&gt; &lt;<A href="#REF118">specify_output_terminal_descriptor</A>&gt; )
	||= ( &lt;<A href="#REF115">list_of_path_inputs</A>&gt; *&gt; &lt;<A href="#REF116">list_of_path_outputs</A>&gt; )

<A name="REF115"></A><B><A href="#REF115">&lt;list_of_path_inputs&gt;</A></B>
	::= &lt;<A href="#REF117">specify_input_terminal_descriptor</A>&gt; &lt;,&lt;<A href="#REF117">specify_input_terminal_descriptor</A>&gt;&gt;*

<A name="REF116"></A><B><A href="#REF116">&lt;list_of_path_outputs&gt;</A></B>
	::=  &lt;<A href="#REF118">specify_output_terminal_descriptor</A>&gt; &lt;,&lt;<A href="#REF118">specify_output_terminal_descriptor</A>&gt;&gt;*

<A name="REF117"></A><B><A href="#REF117">&lt;specify_input_terminal_descriptor&gt;</A></B>
	::= &lt;<A href="#REF119">input_identifier</A>&gt;
	||= &lt;<A href="#REF119">input_identifier</A>&gt; [ &lt;<A href="#REF146">constant_expression</A>&gt; ]
	||= &lt;<A href="#REF119">input_identifier</A>&gt; [ &lt;<A href="#REF146">constant_expression</A>&gt; : &lt;<A href="#REF146">constant_expression</A>&gt; ]

<A name="REF118"></A><B><A href="#REF118">&lt;specify_output_terminal_descriptor&gt;</A></B>
	::= &lt;<A href="#REF120">output_identifier</A>&gt;
	||= &lt;<A href="#REF120">output_identifier</A>&gt; [ &lt;<A href="#REF146">constant_expression</A>&gt; ]
	||= &lt;<A href="#REF120">output_identifier</A>&gt; [ &lt;<A href="#REF146">constant_expression</A>&gt; : &lt;<A href="#REF146">constant_expression</A>&gt; ]

<A name="REF119"></A><B><A href="#REF119">&lt;input_identifier&gt;</A></B>
	::= the &lt;<A href="#REF170">IDENTIFIER</A>&gt; of a module input or inout terminal

<A name="REF120"></A><B><A href="#REF120">&lt;output_identifier&gt;</A></B>
	::= the &lt;<A href="#REF170">IDENTIFIER</A>&gt; of a module output or inout terminal.

<A name="REF121"></A><B><A href="#REF121">&lt;path_delay_value&gt;</A></B>
	::= &lt;<A href="#REF122">path_delay_expression</A>&gt;
	||= ( &lt;<A href="#REF122">path_delay_expression</A>&gt;, &lt;<A href="#REF122">path_delay_expression</A>&gt; )
	||= ( &lt;<A href="#REF122">path_delay_expression</A>&gt;, &lt;<A href="#REF122">path_delay_expression</A>&gt;,
		&lt;<A href="#REF122">path_delay_expression</A>&gt;)
	||= ( &lt;<A href="#REF122">path_delay_expression</A>&gt;, &lt;<A href="#REF122">path_delay_expression</A>&gt;,
		&lt;<A href="#REF122">path_delay_expression</A>&gt;, &lt;<A href="#REF122">path_delay_expression</A>&gt;,
		&lt;<A href="#REF122">path_delay_expression</A>&gt;, &lt;<A href="#REF122">path_delay_expression</A>&gt; )
	||= ( &lt;<A href="#REF122">path_delay_expression</A>&gt;, &lt;<A href="#REF122">path_delay_expression</A>&gt;,
		&lt;<A href="#REF122">path_delay_expression</A>&gt;, &lt;<A href="#REF122">path_delay_expression</A>&gt;,
		&lt;<A href="#REF122">path_delay_expression</A>&gt;, &lt;<A href="#REF122">path_delay_expression</A>&gt;,
		&lt;<A href="#REF122">path_delay_expression</A>&gt;, &lt;<A href="#REF122">path_delay_expression</A>&gt;,
		&lt;<A href="#REF122">path_delay_expression</A>&gt;, &lt;<A href="#REF122">path_delay_expression</A>&gt;,
		&lt;<A href="#REF122">path_delay_expression</A>&gt;, &lt;<A href="#REF122">path_delay_expression</A>&gt; )

<A name="REF122"></A><B><A href="#REF122">&lt;path_delay_expression&gt;</A></B>
	::= &lt;<A href="#REF147">mintypmax_expression</A>&gt;

<A name="REF123"></A><B><A href="#REF123">&lt;system_timing_check&gt;</A></B>
	::= $setup( &lt;<A href="#REF124">timing_check_event</A>&gt;, &lt;<A href="#REF124">timing_check_event</A>&gt;,
		&lt;<A href="#REF133">timing_check_limit</A>&gt;
		&lt;,&lt;<A href="#REF135">notify_register</A>&gt;&gt;? ) ;
	||= $hold( &lt;<A href="#REF124">timing_check_event</A>&gt;, &lt;<A href="#REF124">timing_check_event</A>&gt;,
		&lt;<A href="#REF133">timing_check_limit</A>&gt;
		&lt;,&lt;<A href="#REF135">notify_register</A>&gt;&gt;? ) ;
	||= $period( &lt;<A href="#REF126">controlled_timing_check_event</A>&gt;, &lt;<A href="#REF133">timing_check_limit</A>&gt;
		&lt;,&lt;<A href="#REF135">notify_register</A>&gt;&gt;? ) ;
	||= $width( &lt;<A href="#REF126">controlled_timing_check_event</A>&gt;, &lt;<A href="#REF133">timing_check_limit</A>&gt;
		&lt;,&lt;<A href="#REF146">constant_expression</A>&gt;, &lt;<A href="#REF135">notify_register</A>&gt;&gt;? ) ;
	||= $skew( &lt;<A href="#REF124">timing_check_event</A>&gt;, &lt;<A href="#REF124">timing_check_event</A>&gt;,
		&lt;<A href="#REF133">timing_check_limit</A>&gt;
		&lt;,&lt;<A href="#REF135">notify_register</A>&gt;&gt;? ) ;
	||= $recovery( &lt;<A href="#REF126">controlled_timing_check_event</A>&gt;,
		&lt;<A href="#REF124">timing_check_event</A>&gt;,
		&lt;<A href="#REF133">timing_check_limit</A>&gt; &lt;,&lt;<A href="#REF135">notify_register</A>&gt;&gt;? ) ;
	||= $setuphold( &lt;<A href="#REF124">timing_check_event</A>&gt;, &lt;<A href="#REF124">timing_check_event</A>&gt;,
		&lt;<A href="#REF133">timing_check_limit</A>&gt;, &lt;<A href="#REF133">timing_check_limit</A>&gt; &lt;,&lt;<A href="#REF135">notify_register</A>&gt;&gt;? ) ;

<A name="REF124"></A><B><A href="#REF124">&lt;timing_check_event&gt;</A></B>
	::= &lt;<A href="#REF127">timing_check_event_control</A>&gt;? &lt;<A href="#REF125">specify_terminal_descriptor</A>&gt;
		&lt;&amp;&amp;&amp; &lt;<A href="#REF130">timing_check_condition</A>&gt;&gt;?

<A name="REF125"></A><B><A href="#REF125">&lt;specify_terminal_descriptor&gt;</A></B>
	::= &lt;<A href="#REF117">specify_input_terminal_descriptor</A>&gt;
	||=&lt;<A href="#REF118">specify_output_terminal_descriptor</A>&gt;

<A name="REF126"></A><B><A href="#REF126">&lt;controlled_timing_check_event&gt;</A></B>
	::= &lt;<A href="#REF127">timing_check_event_control</A>&gt; &lt;<A href="#REF125">specify_terminal_descriptor</A>&gt;
		&lt;&amp;&amp;&amp;  &lt;<A href="#REF130">timing_check_condition</A>&gt;&gt;?

<A name="REF127"></A><B><A href="#REF127">&lt;timing_check_event_control&gt;</A></B>
	::= posedge
	||= negedge
	||= &lt;<A href="#REF128">edge_control_specifier</A>&gt;

<A name="REF128"></A><B><A href="#REF128">&lt;edge_control_specifier&gt;</A></B>
	::= edge  [ &lt;<A href="#REF129">edge_descriptor</A>&gt;&lt;,&lt;<A href="#REF129">edge_descriptor</A>&gt;&gt;* ]

<A name="REF129"></A><B><A href="#REF129">&lt;edge_descriptor&gt;</A></B>
	::= 01
	||= 10
	||= 0x
	||= x1
	||= 1x
	||= x0

<A name="REF130"></A><B><A href="#REF130">&lt;timing_check_condition&gt;</A></B>
	::= &lt;<A href="#REF131">scalar_timing_check_condition</A>&gt;
	||= ( &lt;<A href="#REF131">scalar_timing_check_condition</A>&gt; )

<A name="REF131"></A><B><A href="#REF131">&lt;scalar_timing_check_condition&gt;</A></B>
	::= &lt;<A href="#REF132">scalar_expression</A>&gt;
	||= ~&lt;<A href="#REF132">scalar_expression</A>&gt;
	||= &lt;<A href="#REF132">scalar_expression</A>&gt; == &lt;<A href="#REF134">scalar_constant</A>&gt;
	||= &lt;<A href="#REF132">scalar_expression</A>&gt; === &lt;<A href="#REF134">scalar_constant</A>&gt;
	||= &lt;<A href="#REF132">scalar_expression</A>&gt; != &lt;<A href="#REF134">scalar_constant</A>&gt;
	||= &lt;<A href="#REF132">scalar_expression</A>&gt; !== &lt;<A href="#REF134">scalar_constant</A>&gt;

<A name="REF132"></A><B><A href="#REF132">&lt;scalar_expression&gt;</A></B>
	A scalar expression is a one bit net or a bit-select of an expanded vector net.

<A name="REF133"></A><B><A href="#REF133">&lt;timing_check_limit&gt;</A></B>
	::= &lt;<A href="#REF148">expression</A>&gt;

<A name="REF134"></A><B><A href="#REF134">&lt;scalar_constant&gt;</A></B>
	::= 1'b0
	||= 1'b1
	||= 1'B0
	||= 1'B1
	||= 'b0
	||= 'b1
	||= 'B0
	||= 'B1
	||= 1
	||= 0

<A name="REF135"></A><B><A href="#REF135">&lt;notify_register&gt;</A></B>
	::= &lt;<A href="#REF169">identifier</A>&gt;

<A name="REF136"></A><B><A href="#REF136">&lt;level_sensitive_path_declaration&gt;</A></B>
	::= if (&lt;<A href="#REF137">conditional_port_expression</A>&gt;)
		(&lt;<A href="#REF117">specify_input_terminal_descriptor</A>&gt; &lt;<A href="#REF138">polarity_operator</A>&gt;? =&gt;
		&lt;<A href="#REF118">specify_output_terminal_descriptor</A>&gt;) = &lt;<A href="#REF121">path_delay_value</A>&gt;;
	||= if (&lt;<A href="#REF137">conditional_port_expression</A>&gt;)
		(&lt;<A href="#REF115">list_of_path_inputs</A>&gt; &lt;<A href="#REF138">polarity_operator</A>&gt;? *&gt;
		&lt;<A href="#REF116">list_of_path_outputs</A>&gt;) = &lt;<A href="#REF121">path_delay_value</A>&gt;;
	(Note: The following two symbols are literal symbols, not syntax description conventions:)
		*&gt;	=&gt;

<A name="REF137"></A><B><A href="#REF137">&lt;conditional_port_expression&gt;</A></B>
	::= &lt;<A href="#REF8">port_reference</A>&gt;
	||= &lt;<A href="#REF149">UNARY_OPERATOR</A>&gt;&lt;<A href="#REF8">port_reference</A>&gt;
	||= &lt;<A href="#REF8">port_reference</A>&gt;&lt;<A href="#REF150">BINARY_OPERATOR</A>&gt;&lt;<A href="#REF8">port_reference</A>&gt;

<A name="REF138"></A><B><A href="#REF138">&lt;polarity_operator&gt;</A></B>
	::= +
	||= -

<A name="REF139"></A><B><A href="#REF139">&lt;edge_sensitive_path_declaration&gt;</A></B>
	::= &lt;if (&lt;<A href="#REF148">expression</A>&gt;)&gt;? (&lt;<A href="#REF141">edge_identifier</A>&gt;?
		&lt;<A href="#REF117">specify_input_terminal_descriptor</A>&gt; =&gt;
		(&lt;<A href="#REF118">specify_output_terminal_descriptor</A>&gt; &lt;<A href="#REF138">polarity_operator</A>&gt;?
		: &lt;<A href="#REF140">data_source_expression</A>&gt;)) = &lt;<A href="#REF121">path_delay_value</A>&gt;;
	||= &lt;if (&lt;<A href="#REF148">expression</A>&gt;)&gt;? (&lt;<A href="#REF141">edge_identifier</A>&gt;?
		&lt;<A href="#REF117">specify_input_terminal_descriptor</A>&gt; *&gt;
		(&lt;<A href="#REF116">list_of_path_outputs</A>&gt; &lt;<A href="#REF138">polarity_operator</A>&gt;?
		: &lt;<A href="#REF140">data_source_expression</A>&gt;)) =&lt;<A href="#REF121">path_delay_value</A>&gt;;

<A name="REF140"></A><B><A href="#REF140">&lt;data_source_expression&gt;</A></B>
	Any expression, including constants and lists. Its width must be one bit or
	equal to the  destination's width. If the destination is a list, the data
	source must be as wide as the sum of  the bits of the members.

<A name="REF141"></A><B><A href="#REF141">&lt;edge_identifier&gt;</A></B>
	::= posedge
	||= negedge

<A name="REF142"></A><B><A href="#REF142">&lt;sdpd&gt;</A></B>
	::= if ( &lt;<A href="#REF">sdpd_conditional_expression</A>&gt; ) &lt;<A href="#REF114">path_description</A>&gt; = &lt;<A href="#REF121">path_delay_value</A>&gt;;

<A name="REF143"></A><B><A href="#REF143">&lt;sdpd_conditional_expression&gt;</A></B>
	::=&lt;<A href="#REF148">expression</A>&gt;&lt;<A href="#REF150">BINARY_OPERATOR</A>&gt;&lt;<A href="#REF148">expression</A>&gt;
	||=&lt;<A href="#REF149">UNARY_OPERATOR</A>&gt;&lt;<A href="#REF148">expression</A>&gt;


</PRE>
<H2><A name="REF144"></A>7. Expressions</H2>
<PRE>
<A name="REF145"></A><B><A href="#REF145">&lt;lvalue&gt;</A></B>
	::= &lt;<A href="#REF169">identifier</A>&gt;
	||= &lt;<A href="#REF169">identifier</A>&gt; [ &lt;<A href="#REF148">expression</A>&gt; ]
	||= &lt;<A href="#REF169">identifier</A>&gt; [ &lt;<A href="#REF146">constant_expression</A>&gt; : &lt;<A href="#REF146">constant_expression</A>&gt; ]
	||= &lt;<A href="#REF159">concatenation</A>&gt;

<A name="REF146"></A><B><A href="#REF146">&lt;constant_expression&gt;</A></B>
	::=&lt;<A href="#REF148">expression</A>&gt;

<A name="REF147"></A><B><A href="#REF147">&lt;mintypmax_expression&gt;</A></B>
	::= &lt;<A href="#REF148">expression</A>&gt;
	||= &lt;<A href="#REF148">expression</A>&gt; : &lt;<A href="#REF148">expression</A>&gt; : &lt;<A href="#REF148">expression</A>&gt;

<A name="REF148"></A><B><A href="#REF148">&lt;expression&gt;</A></B>
	::= &lt;<A href="#REF153">primary</A>&gt;
	||= &lt;<A href="#REF149">UNARY_OPERATOR</A>&gt; &lt;<A href="#REF153">primary</A>&gt;
	||= &lt;<A href="#REF148">expression</A>&gt; &lt;<A href="#REF150">BINARY_OPERATOR</A>&gt; &lt;<A href="#REF148">expression</A>&gt;
	||= &lt;<A href="#REF148">expression</A>&gt; &lt;<A href="#REF151">QUESTION_MARK</A>&gt; &lt;<A href="#REF148">expression</A>&gt; : &lt;<A href="#REF148">expression</A>&gt;
	||= &lt;<A href="#REF152">STRING</A>&gt;


<A name="REF149"></A><B><A href="#REF149">&lt;UNARY_OPERATOR&gt;</A></B> is one of the following tokens:
	+  -  !  ~  &amp;  ~&amp;  |  ^|  ^  ~^

<A name="REF150"></A><B><A href="#REF150">&lt;BINARY_OPERATOR&gt;</A></B> is one of the following tokens:
	+  -  *  /  %  ==  !=  ===  !==  &amp;&amp;  ||  &lt;  &lt;=  &gt;  &gt;=  &amp;  |  ^  ^~  &gt;&gt;  &lt;&lt;

<A name="REF151"></A><B><A href="#REF151">&lt;QUESTION_MARK&gt;</A></B> is ? (a literal question mark).

<A name="REF152"></A><B><A href="#REF152">&lt;STRING&gt;</A></B> is text enclosed in "" and contained on one line.

<A name="REF153"></A><B><A href="#REF153">&lt;primary&gt;</A></B>
	::= &lt;<A href="#REF154">number</A>&gt;
	||= &lt;<A href="#REF169">identifier</A>&gt;
	||= &lt;<A href="#REF169">identifier</A>&gt; [ &lt;<A href="#REF148">expression</A>&gt; ]
	||= &lt;<A href="#REF169">identifier</A>&gt; [ &lt;<A href="#REF146">constant_expression</A>&gt; : &lt;<A href="#REF146">constant_expression</A>&gt; ]
	||= &lt;<A href="#REF159">concatenation</A>&gt;
	||= &lt;<A href="#REF160">multiple_concatenation</A>&gt;
	||= &lt;<A href="#REF161">function_call</A>&gt;
	||= ( &lt;<A href="#REF147">mintypmax_expression</A>&gt; )

<A name="REF154"></A><B><A href="#REF154">&lt;number&gt;</A></B>
	::= &lt;<A href="#REF155">DECIMAL_NUMBER</A>&gt;
	||= &lt;<A href="#REF156">UNSIGNED_NUMBER</A>&gt;? &lt;<A href="#REF158">BASE</A>&gt; &lt;<A href="#REF156">UNSIGNED_NUMBER</A>&gt;
	||= &lt;<A href="#REF155">DECIMAL_NUMBER</A>&gt;.&lt;<A href="#REF156">UNSIGNED_NUMBER</A>&gt;
	||= &lt;<A href="#REF155">DECIMAL_NUMBER</A>&gt;&lt;.&lt;<A href="#REF156">UNSIGNED_NUMBER</A>&gt;&gt;?
		E&lt;<A href="#REF155">DECIMAL_NUMBER</A>&gt;
	||= &lt;<A href="#REF155">DECIMAL_NUMBER</A>&gt;&lt;.&lt;<A href="#REF156">UNSIGNED_NUMBER</A>&gt;&gt;?
		e&lt;<A href="#REF155">DECIMAL_NUMBER</A>&gt;
	(Note: embedded spaces are illegal in Verilog numbers, but embedded underscore
	characters can be used for spacing in any type of number.)

<A name="REF155"></A><B><A href="#REF155">&lt;DECIMAL_NUMBER&gt;</A></B>
	::= A number containing a set of any of the following characters, optionally preceded by + or -
	 	0123456789_

<A name="REF156"></A><B><A href="#REF156">&lt;UNSIGNED_NUMBER&gt;</A></B>
	::= A number containing a set of any of the following characters:
	        0123456789_

<A name="REF157"></A><B><A href="#REF157">&lt;NUMBER&gt;</A></B>
	Numbers can be specified in decimal, hexadecimal, octal or binary, and may
	optionally start with a + or -.  The &lt;<A href="#REF158">BASE</A>&gt; token controls what number digits
	are legal.  &lt;<A href="#REF158">BASE</A>&gt; must be one of d, h, o, or b, for the bases decimal,
	hexadecimal, octal, and binary respectively. A number can contain any set of
	the following characters that is consistent with &lt;<A href="#REF158">BASE</A>&gt;:
	0123456789abcdefABCDEFxXzZ?

<A name="REF158"></A><B><A href="#REF158">&lt;BASE&gt;</A></B> is one of the following tokens:
	'b   'B   'o   'O   'd   'D   'h   'H

<A name="REF159"></A><B><A href="#REF159">&lt;concatenation&gt;</A></B>
	::= { &lt;<A href="#REF148">expression</A>&gt; &lt;,&lt;<A href="#REF148">expression</A>&gt;&gt;* }

<A name="REF160"></A><B><A href="#REF160">&lt;multiple_concatenation&gt;</A></B>
	::= { &lt;<A href="#REF148">expression</A>&gt; { &lt;<A href="#REF148">expression</A>&gt; &lt;,&lt;<A href="#REF148">expression</A>&gt;&gt;* } }

<A name="REF161"></A><B><A href="#REF161">&lt;function_call&gt;</A></B>
	::= &lt;<A href="#REF162">name_of_function</A>&gt; ( &lt;<A href="#REF148">expression</A>&gt; &lt;,&lt;<A href="#REF148">expression</A>&gt;&gt;* )
	||= &lt;<A href="#REF163">name_of_system_function</A>&gt; ( &lt;<A href="#REF148">expression</A>&gt; &lt;,&lt;<A href="#REF148">expression</A>&gt;&gt;* )
	||= &lt;<A href="#REF163">name_of_system_function</A>&gt;

<A name="REF162"></A><B><A href="#REF162">&lt;name_of_function&gt;</A></B>
	::= &lt;<A href="#REF169">identifier</A>&gt;

<A name="REF163"></A><B><A href="#REF163">&lt;name_of_system_function&gt;</A></B>
	::= $&lt;<A href="#REF106">SYSTEM_IDENTIFIER</A>&gt;
	(Note: the $ may not be followed by a space.)



</PRE>
<H2><A name="REF164"></A>8. General </H2>
<PRE>
<A name="REF165"></A><B><A href="#REF165">&lt;comment&gt;</A></B>
	::= &lt;<A href="#REF166">short_comment</A>&gt;
	||= &lt;<A href="#REF167">long_comment</A>&gt;

<A name="REF166"></A><B><A href="#REF166">&lt;short_comment&gt;</A></B>
	::= // &lt;<A href="#REF168">comment_text</A>&gt; &lt;END-OF-LINE&gt;

<A name="REF167"></A><B><A href="#REF167">&lt;long_comment&gt;</A></B>
	::= /* &lt;<A href="#REF168">comment_text</A>&gt; */

<A name="REF168"></A><B><A href="#REF168">&lt;comment_text&gt;</A></B>
	::= The comment text is zero or more ASCII characters

<A name="REF169"></A><B><A href="#REF169">&lt;identifier&gt;</A></B>
	::= &lt;<A href="#REF170">IDENTIFIER</A>&gt;&lt;.&lt;<A href="#REF170">IDENTIFIER</A>&gt;&gt;*
	(Note: the period may not be preceded or followed by a space.)

<A name="REF170"></A><B><A href="#REF170">&lt;IDENTIFIER&gt;</A></B>
	An identifier is any sequence of letters, digits, dollar signs ($), and
	underscore (_) symbol, except that the first must be a letter or the
	underscore; the first character may not be a digit or $. Upper and lower case
	letters are considered to be different. Identifiers may be up to 1024
	characters long. Some Verilog-based tools do not recognize  identifier
	characters beyond the 1024th as a significant part of the identifier. Escaped
	identifiers start with the backslash character (\) and may include any
	printable ASCII character. An escaped identifier ends with white space. The
	leading backslash character is not considered to be part of the identifier.

<A name="REF171"></A><B><A href="#REF171">&lt;delay&gt;</A></B>
	::= # &lt;<A href="#REF154">number</A>&gt;
	||= # &lt;<A href="#REF169">identifier</A>&gt;
	||= # ( &lt;<A href="#REF147">mintypmax_expression</A>&gt; &lt;,&lt;<A href="#REF147">mintypmax_expression</A>&gt;&gt;?
		&lt;,&lt;<A href="#REF147">mintypmax_expression</A>&gt;&gt;?)

<A name="REF172"></A><B><A href="#REF172">&lt;delay_control&gt;</A></B>
	::= # &lt;<A href="#REF154">number</A>&gt;
	||= # &lt;<A href="#REF169">identifier</A>&gt;
	||= # ( &lt;<A href="#REF147">mintypmax_expression</A>&gt; )

<A name="REF173"></A><B><A href="#REF173">&lt;event_control&gt;</A></B>
	::= @ &lt;<A href="#REF169">identifier</A>&gt;
	||= @ ( &lt;<A href="#REF174">event_expression</A>&gt; )

<A name="REF174"></A><B><A href="#REF174">&lt;event_expression&gt;</A></B>
	::= &lt;<A href="#REF148">expression</A>&gt;
	||= posedge &lt;<A href="#REF175">scalar_event_expression</A>&gt;
	||= negedge &lt;<A href="#REF175">scalar_event_expression</A>&gt;
	||= &lt;<A href="#REF174">event_expression</A>&gt; or &lt;<A href="#REF174">event_expression</A>&gt;

<A name="REF175"></A><B><A href="#REF175">&lt;scalar_event_expression&gt;</A></B>
	Scalar event expression is an expression that resolves to a one bit value.
</PRE>


</BODY></HTML>